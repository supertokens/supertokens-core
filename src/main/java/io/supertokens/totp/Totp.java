package io.supertokens.totp;

import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.time.Instant;
import java.util.Arrays;
import java.util.Base64;

import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.jetbrains.annotations.TestOnly;

import java.util.Base64;

import io.supertokens.Main;
import io.supertokens.config.Config;

import com.eatthepath.otp.TimeBasedOneTimePasswordGenerator;
import io.supertokens.pluginInterface.exceptions.StorageQueryException;
import io.supertokens.pluginInterface.totp.TOTPDevice;
import io.supertokens.pluginInterface.totp.TOTPStorage;
import io.supertokens.pluginInterface.totp.TOTPUsedCode;
import io.supertokens.pluginInterface.totp.exception.DeviceAlreadyExistsException;
import io.supertokens.pluginInterface.totp.exception.TotpNotEnabledException;
import io.supertokens.pluginInterface.totp.exception.UnknownDeviceException;
import io.supertokens.pluginInterface.totp.sqlStorage.TOTPSQLStorage;
import io.supertokens.storageLayer.StorageLayer;
import io.supertokens.totp.exceptions.InvalidTotpException;
import io.supertokens.totp.exceptions.LimitReachedException;

public class Totp {
    private static String generateSecret() throws Exception {
        final String TOTP_ALGORITHM = "HmacSHA1";

        try {
            final KeyGenerator keyGenerator = KeyGenerator.getInstance(TOTP_ALGORITHM);
            keyGenerator.init(160); // 160 bits = 20 bytes

            // FIXME: Should return base32 or base16
            // Return base64 string of the secret key:
            return Base64.getEncoder().encodeToString(keyGenerator.generateKey().getEncoded());
        } catch (NoSuchAlgorithmException e) {
            throw new Exception("TOTP algorithm not found");
        }
    }

    private static boolean checkCode(TOTPDevice device, String code) {
        final TimeBasedOneTimePasswordGenerator totp = new TimeBasedOneTimePasswordGenerator();

        byte[] keyBytes = Base64.getDecoder().decode(device.secretKey);
        Key key = new SecretKeySpec(keyBytes, "HmacSHA1");

        final int period = device.period;
        final int skew = device.skew;

        // Check if code is valid for any of the time periods in the skew:
        for (int i = -skew; i <= skew; i++) {
            try {
                // FIXME: Where is this using % on the period?
                if (totp.generateOneTimePasswordString(key, Instant.now().plusSeconds(i * period)).equals(code)) {
                    return true;
                }
            } catch (InvalidKeyException e) {
                return false;
            }
        }

        return false;
    }

    /**
     * Replicates TOTP code is generated by apps like Google Authenticator and Authy
     */
    @TestOnly
    public static String generateTotpCodeForDevice(TOTPDevice device) throws InvalidKeyException {
        final TimeBasedOneTimePasswordGenerator totp = new TimeBasedOneTimePasswordGenerator();

        byte[] keyBytes = Base64.getDecoder().decode(device.secretKey);
        Key key = new SecretKeySpec(keyBytes, "HmacSHA1");

        return totp.generateOneTimePasswordString(key, Instant.now());
    }

    public static String registerDevice(Main main, String userId, String deviceName, int skew, int period)
            throws StorageQueryException, DeviceAlreadyExistsException, Exception {

        TOTPSQLStorage totpStorage = StorageLayer.getTOTPStorage(main);

        String secret = generateSecret(); // TODO: should we handle Exception differently?
        TOTPDevice device = new TOTPDevice(userId, deviceName, secret, period, skew, false);
        totpStorage.createDevice(device);

        return secret;
    }

    private static void checkAndStoreCode(TOTPStorage totpStorage, String userId, TOTPDevice[] devices,
            TOTPUsedCode[] usedCodes, String code)
            throws InvalidTotpException, StorageQueryException, TotpNotEnabledException {

        // Check if the code is valid for any device:
        boolean isValid = false;
        TOTPDevice matchingDevice = null;
        for (TOTPDevice device : devices) {
            // Check if the code is valid for this device:
            if (checkCode(device, code)) {
                isValid = true;
                matchingDevice = device;
                break;
            }
        }

        // Check if the code has been successfully used by the user (for any device):
        for (TOTPUsedCode usedCode : usedCodes) {
            // One edge case is that if the user has 2 devices, and they are used back to
            // back (within 90 seconds) such that the code of the first device was
            // regenerated by the second device, then it won't allow the second device's
            // code to be used until it is expired.
            // But this would be rare so we can ignore it for now.
            if (usedCode.code.equals(code)) {
                throw new InvalidTotpException();
            }
        }

        // Insert the code into the list of used codes:
        long now = System.currentTimeMillis();
        int expireInSec = isValid ? matchingDevice.period * (2 * matchingDevice.skew + 1) : 60 * 5;

        TOTPUsedCode newCode = new TOTPUsedCode(userId, code, isValid, now + 1000 * expireInSec, now);
        totpStorage.insertUsedCode(newCode);
    }

    public static boolean verifyDevice(Main main, String userId, String deviceName, String code)
            throws StorageQueryException, TotpNotEnabledException, UnknownDeviceException, InvalidTotpException {
        // Here boolean return value tells whether the device has been
        // newly verified (true) OR it was already verified (false)

        TOTPSQLStorage totpStorage = StorageLayer.getTOTPStorage(main);
        TOTPDevice matchingDevice = null;

        // Check if the user has any devices:
        TOTPDevice[] devices = totpStorage.getDevices(userId);
        if (devices.length == 0) {
            throw new TotpNotEnabledException();
        }

        // Check if the requested device exists:
        for (TOTPDevice device : devices) {
            if (device.deviceName.equals(deviceName)) {
                matchingDevice = device;
                if (device.verified) {
                    return false; // Was already verified
                }
                break;
            }
        }

        // No device found:
        if (matchingDevice == null) {
            throw new UnknownDeviceException();
        }

        // If the device is not verified, check if the code is valid and unused.
        // If it is successful, mark the device as verified.
        TOTPUsedCode[] usedCodes = totpStorage.getNonExpiredUsedCodes(userId);
        checkAndStoreCode(totpStorage, userId, new TOTPDevice[] { matchingDevice }, usedCodes, code);
        totpStorage.markDeviceAsVerified(userId, deviceName);
        // Note: No rate limiting in device verification
        return true; // Newly verified
    }

    public static void verifyCode(Main main, String userId, String code, boolean allowUnverifiedDevices)
            throws StorageQueryException, TotpNotEnabledException, InvalidTotpException,
            LimitReachedException {
        TOTPSQLStorage totpStorage = StorageLayer.getTOTPStorage(main);

        // Check if the user has any devices:
        TOTPDevice[] devices = totpStorage.getDevices(userId);
        if (devices.length == 0) {
            throw new TotpNotEnabledException();
        }

        // Filter out unverified devices:
        if (!allowUnverifiedDevices) {
            devices = Arrays.stream(devices).filter(device -> device.verified).toArray(TOTPDevice[]::new);
        }

        TOTPUsedCode[] usedCodes = totpStorage.getNonExpiredUsedCodes(userId);

        try {
            checkAndStoreCode(totpStorage, userId, devices, usedCodes, code);
        } catch (InvalidTotpException e) {
            // Now we know that the code is invalid.

            // Note: usedCodes will get updated when
            // - A valid code is used: It will break the chain of invalid codes.
            // - Cron job runs: deletes expired codes every hour

            // Check if latest N codes are all invalid:
            int N = Config.getConfig(main).getTotpRateLimitWindowSize(); // default = 5
            long invalidCodeCount = Arrays.stream(usedCodes).limit(N).takeWhile(usedCode -> !usedCode.isValid).count();
            if (invalidCodeCount >= N) {
                throw new LimitReachedException();
            }

            // Code is invalid but the user has not exceeded the limit:
            throw e;
        }
    }

    public static void deleteDevice(Main main, String userId, String deviceName)
            throws StorageQueryException, UnknownDeviceException, TotpNotEnabledException {
        TOTPSQLStorage totpStorage = StorageLayer.getTOTPStorage(main);

        try {
            totpStorage.deleteDevice(userId, deviceName);
        } catch (UnknownDeviceException e) {
            // See if any device exists for the user:
            TOTPDevice[] devices = totpStorage.getDevices(userId);
            if (devices.length == 0) {
                throw new TotpNotEnabledException();
            }
            throw e;
        }
    }

    public static void updateDeviceName(Main main, String userId, String oldDeviceName, String newDeviceName)
            throws StorageQueryException, DeviceAlreadyExistsException, UnknownDeviceException,
            TotpNotEnabledException {
        TOTPSQLStorage totpStorage = StorageLayer.getTOTPStorage(main);
        try {
            totpStorage.updateDeviceName(userId, oldDeviceName, newDeviceName);
        } catch (UnknownDeviceException e) {
            // See if any device exists for the user:
            TOTPDevice[] devices = totpStorage.getDevices(userId);
            if (devices.length == 0) {
                throw new TotpNotEnabledException();
            } else {
                throw e;
            }
        }
    }

    public static TOTPDevice[] getDevices(Main main, String userId)
            throws StorageQueryException, TotpNotEnabledException {
        TOTPSQLStorage totpStorage = StorageLayer.getTOTPStorage(main);

        TOTPDevice[] devices = totpStorage.getDevices(userId);
        if (devices.length == 0) {
            throw new TotpNotEnabledException();
        }
        return devices;
    }

}
