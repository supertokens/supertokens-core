/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */

plugins {
    id 'application'
}
compileJava { options.encoding = "UTF-8" }
compileTestJava { options.encoding = "UTF-8" }

// Uncomment the below lines to make UTF-9 non default while testing
//allprojects {
//    tasks.withType(Test) {
//        systemProperty "file.encoding", "US-ASCII"
//    }
//}

version = "9.2.1"


repositories {
    mavenCentral()
}

dependencies {

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    // if this changes, remember to also change in the ee folder's build.gradle
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.16.1'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.16.1'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.14'

    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.1.18'

    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.45.1.0'

    // https://mvnrepository.com/artifact/org.mindrot/jbcrypt
    implementation group: 'org.mindrot', name: 'jbcrypt', version: '0.4'

    // https://mvnrepository.com/artifact/org.jetbrains/annotations
    implementation group: 'org.jetbrains', name: 'annotations', version: '13.0'

    // https://mvnrepository.com/artifact/de.mkammerer/argon2-jvm
    implementation group: 'de.mkammerer', name: 'argon2-jvm', version: '2.11'

    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation 'com.auth0:java-jwt:4.4.0'

    // https://mvnrepository.com/artifact/com.lambdaworks/scrypt
    implementation group: 'com.lambdaworks', name: 'scrypt', version: '1.4.0'

    // https://mvnrepository.com/artifact/com.eatthepath/java-otp
    implementation group: 'com.eatthepath', name: 'java-otp', version: '0.4.0'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'

    // https://mvnrepository.com/artifact/com.googlecode.libphonenumber/libphonenumber/
    implementation group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '8.13.25'

    compileOnly project(":supertokens-plugin-interface")
    testImplementation project(":supertokens-plugin-interface")

    // this is so that we can find plugin-interface jar while testing
    testImplementation 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.1.0'

    // https://mvnrepository.com/artifact/org.reflections/reflections
    testImplementation group: 'org.reflections', name: 'reflections', version: '0.9.10'

    testImplementation 'com.tngtech.archunit:archunit-junit4:0.22.0'

}

application {
    mainClass.set("io.supertokens.Main")
}

jar {
    archiveBaseName.set('core')
}


task copyJars(type: Copy) {
    into "$buildDir/dependencies"
    from configurations.runtimeClasspath
}

test {
    jvmArgs '-Djava.security.egd=file:/dev/urandom'
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat


        // collect failing test names
        ext.failedTests = []
        afterTest { descriptor, result ->
            if (result.resultType == TestResult.ResultType.FAILURE) {
                String failedTest = "${descriptor.className}::${descriptor.name}"
                logger.debug("Adding " + failedTest + " to failedTests...")
                failedTests << [failedTest]
            }
        }

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                // print failing tests
                if (!failedTests.empty) {
                    println("\nFailed tests:")
                    failedTests.each { failedTest ->
                        logger.lifecycle("${failedTest}")
                    }
                }
            }
        }
    }
}
